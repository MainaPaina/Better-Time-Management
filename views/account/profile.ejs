<div class="profile-container">
  <div class="profile-header">
    <h1>Your Profile</h1>
    <p>Manage your account settings and preferences</p>
  </div>

  <div class="profile-content">
    <div class="profile-section">
      <h2><i class="fas fa-user-circle"></i> Account Information</h2>
      <div class="profile-info">
        <div class="info-group">
          <label>Name</label>
          <p class="info-value"><%= user.name %></p>
        </div>

        <div class="info-group">
          <label>Username</label>
          <p class="info-value"><%= user.username %></p>
        </div>

        <div class="info-group">
          <label>Role</label>
          <p>
            <%
              if (user.roles && user.roles.length > 0) {
                user.roles.forEach(role => {
                  %>
                  <span class="role-badge role-badge-<%= role %>"><%= role.charAt(0).toUpperCase() + role.slice(1) %></span>
                  <%
                });
              } else {
                user.role = 'guest'; // Default role if none is assigned
              }
            %>
            <span class="role-badge <%= user.role %>"><%= user.role.charAt(0).toUpperCase() + user.role.slice(1) %></span></p>
        </div>
      </div>
    </div>
     <!-- Profile Image Section -->
     <div class="profile-section">
      <h2><i class="fas fa-image"></i> Profile Image</h2>
      <div class="profile-image-container">
        <div class="current-image">
          <% if (user && user.profile_image) { %>
            <img src="<%= user.profile_image %>" alt="Profile Image" id="profileImagePreview">
          <% } else { %>
            <div class="no-image">
              <i class="fas fa-user-circle"></i>
              <p>No profile image</p>
            </div>
          <% } %>
        </div>
        <form id="imageUploadForm" enctype="multipart/form-data" class="profile-form">
          <div class="form-row">
            <div class="form-group">
              <label for="profileImage">Choose a new profile image</label>
              <input type="file" id="profileImage" name="profileImage" accept="image/*" class="form-control-file">
              <small class="form-text text-muted">Max file size: 5MB. Recommended: square image (1:1 ratio).</small>
            </div>
          </div>
        </form>
        <div style="text-align: center; margin-top: 1.5rem;">
          <button form="imageUploadForm" type="submit" class="btn btn-primary" style="min-width: 216px;">
            <i class="fas fa-upload"></i> Upload Image
          </button>
        </div>
      </div>
    </div>
    <div class="profile-section">
      <h2><i class="fas fa-key"></i> Update Password</h2>
      <form class="profile-form" id="passwordForm">
        <div class="form-row">
          <div class="form-group">
            <label for="currentPassword">Current Password</label>
            <div class="password-input-group">
              <input type="password" id="currentPassword" name="currentPassword" class="form-control" required>
              <button type="button" class="password-toggle" data-target="currentPassword">
                <i class="fas fa-eye"></i>
              </button>
            </div>
          </div>
        </div>

        <div class="form-row">
          <div class="form-group">
            <label for="newPassword">New Password</label>
            <div class="password-input-group">
              <input type="password" id="newPassword" name="newPassword" class="form-control" required>
              <button type="button" class="password-toggle" data-target="newPassword">
                <i class="fas fa-eye"></i>
              </button>
            </div>
          </div>

          <div class="form-group">
            <label for="confirmPassword">Confirm Password</label>
            <div class="password-input-group">
              <input type="password" id="confirmPassword" name="confirmPassword" class="form-control" required>
              <button type="button" class="password-toggle" data-target="confirmPassword">
                <i class="fas fa-eye"></i>
              </button>
            </div>
          </div>
        </div>

        </form>
        <div style="text-align: center; margin-top: 1.5rem;">
          <button form="passwordForm" type="submit" class="btn btn-primary" style="min-width: 200px;">
            <i class="fas fa-save"></i> Update Password
          </button>
        </div>
    </div>
  </div>
</div>

<style>
.profile-container {
  max-width: 800px;
  margin: 0 auto;
  padding: 2rem 1rem;
}

.profile-header {
  margin-bottom: 2rem;
  border-bottom: 2px solid #e9ecef;
  padding-bottom: 1rem;
}

.profile-header h1 {
  font-size: 2rem;
  margin-bottom: 0.5rem;
  color: #333;
  font-weight: 600;
}

.profile-header p {
  color: #495057;
  font-size: 1.1rem;
}

.profile-section {
  background: white;
  border-radius: 8px;
  padding: 1.8rem;
  margin-bottom: 2rem;
  box-shadow: 0 4px 15px rgba(0,0,0,0.1);
  border: 1px solid #e9ecef;
}

.profile-section h2 {
  font-size: 1.5rem;
  margin-bottom: 1.5rem;
  color: #333;
  font-weight: 600;
  border-bottom: 1px solid #e9ecef;
  padding-bottom: 0.8rem;
}

.profile-section h2 i {
  margin-right: 0.5rem;
  color: var(--primary-color);
}

.profile-info {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  gap: 1.5rem;
}

.info-group {
  margin-bottom: 1rem;
}

.info-group label {
  font-weight: 600;
  color: #495057;
  display: block;
  margin-bottom: 0.5rem;
  font-size: 0.95rem;
}

.info-group p {
  font-size: 1.2rem;
  color: #212529;
  margin: 0;
}

.info-value {
  font-weight: 500;
}

.role-badge {
  display: inline-block;
  padding: 0.35rem 1rem;
  border-radius: 30px;
  font-size: 1rem;
  font-weight: 600;
  letter-spacing: 0.5px;
}

.role-badge-admin {
  background-color: #7e3bcc;
  color: white;
}

.role-badge-employee {
  background-color: #2575fc;
  color: white;
}

.profile-form .form-row {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  gap: 1.5rem;
  margin-bottom: 1.5rem;
}

.profile-form .form-group {
  margin-bottom: 1.5rem;
}

.profile-form label {
  font-weight: 600;
  margin-bottom: 0.5rem;
  display: block;
  color: #495057;
  font-size: 0.95rem;
}

.profile-form .form-control {
  width: 100%;
  padding: 0.85rem 1rem;
  font-size: 1.05rem;
  border: 2px solid #ced4da;
  border-radius: 6px;
  transition: all 0.3s;
  color: #212529;
}

.profile-form .form-control:focus {
  border-color: var(--primary-color);
  outline: none;
  box-shadow: 0 0 0 3px rgba(106, 17, 203, 0.2);
}

.password-input-group {
  position: relative;
}

.password-toggle {
  position: absolute;
  right: 10px;
  top: 50%;
  transform: translateY(-50%);
  background: none;
  border: none;
  color: #6c757d;
  cursor: pointer;
  padding: 5px;
}

.password-toggle:hover {
  color: #495057;
}

.form-actions {
  margin-top: 2rem;
  text-align: right;
}

.btn {
  display: inline-block;
  padding: 0.8rem 1.5rem;
  font-size: 1rem;
  font-weight: 600;
  text-align: center;
  border-radius: 6px;
  cursor: pointer;
  transition: all 0.3s;
  border: none;
}

.btn-primary {
  background: var(--primary-color);
  background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
  color: white;
}

.btn-primary:hover {
  box-shadow: 0 5px 15px rgba(106, 17, 203, 0.4);
  transform: translateY(-2px);
}

.btn i {
  margin-right: 0.5rem;
}
.profile-image-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 1.5rem;
}

.current-image {
  width: 150px;
  height: 150px;
  border-radius: 50%;
  overflow: hidden;
  box-shadow: 0 4px 10px rgba(0,0,0,0.1);
  border: 3px solid #fff;
}

.current-image img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.no-image {
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background-color: #f8f9fa;
  color: #6c757d;
}

.no-image i {
  font-size: 3rem;
  margin-bottom: 0.5rem;
}

.no-image p {
  font-size: 0.9rem;
  margin: 0;
}

#imageUploadForm {
  width: 100%;
  max-width: 400px;
}

.form-control-file {
  padding: 0.5rem;
  border: 1px solid #ced4da;
  border-radius: 6px;
  width: 100%;
}
/* Additional styles for alerts */
.alert {
  padding: 1rem;
  border-radius: 6px;
  margin-bottom: 1.5rem;
  position: relative;
  font-weight: 500;
}

.alert i {
  margin-right: 0.5rem;
}

.alert-danger {
  background-color: #f8d7da;
  border: 1px solid #f5c6cb;
  color: #721c24;
}

.alert-success {
  background-color: #d4edda;
  border: 1px solid #c3e6cb;
  color: #155724;
}

.alert.fade-out {
  opacity: 0;
  transition: opacity 0.3s ease-out;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const passwordForm = document.getElementById('passwordForm');
  const passwordToggles = document.querySelectorAll('.password-toggle');

  // Password toggle functionality
  passwordToggles.forEach(toggle => {
    toggle.addEventListener('click', function() {
      const targetId = this.getAttribute('data-target');
      const passwordField = document.getElementById(targetId);

      if (passwordField) {
        const type = passwordField.getAttribute('type') === 'password' ? 'text' : 'password';
        passwordField.setAttribute('type', type);

        // Toggle the eye icon
        this.querySelector('i').classList.toggle('fa-eye');
        this.querySelector('i').classList.toggle('fa-eye-slash');
      }
    });
  });

  // Form submission
  if (passwordForm) {
    passwordForm.addEventListener('submit', async function(e) {
      e.preventDefault();

      // Remove any existing alerts
      const existingAlerts = passwordForm.querySelectorAll('.alert');
      existingAlerts.forEach(alert => alert.remove());

      const currentPassword = document.getElementById('currentPassword').value;
      const newPassword = document.getElementById('newPassword').value;
      const confirmPassword = document.getElementById('confirmPassword').value;

      // Basic client-side validation with better feedback
      if (newPassword !== confirmPassword) {
        // Create a more user-friendly alert
        const alertElement = document.createElement('div');
        alertElement.className = 'alert alert-danger';
        alertElement.innerHTML = '<i class="fas fa-exclamation-circle"></i> New passwords do not match!';

        // Insert at the top of the form
        passwordForm.insertBefore(alertElement, passwordForm.firstChild);

        // Remove after 5 seconds
        setTimeout(() => {
          alertElement.remove();
        }, 5000);
        return;
      }

      // Show loading state
      const submitButton = passwordForm.querySelector('button[type="submit"]');
      const originalButtonText = submitButton.innerHTML;
      submitButton.disabled = true;
      submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Updating...';

      try {
        // Get token from localStorage or from the session cookie
        let token = localStorage.getItem('token');
        
        // If no token in localStorage, we'll proceed without it
        if (!token) {
          console.log('No token found in localStorage, proceeding with session-based authentication');
        }

        // Send request to change password
        const response = await fetch('/account/change-password', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify({
            currentPassword,
            newPassword
          })
        });

        const result = await response.json();

        if (response.ok) {
          // Success feedback
          const successElement = document.createElement('div');
          successElement.className = 'alert alert-success';
          successElement.innerHTML = `<i class="fas fa-check-circle"></i> ${result.message || 'Password updated successfully!'}`;

          // Insert at the top of the form
          passwordForm.insertBefore(successElement, passwordForm.firstChild);

          // Clear the form
          passwordForm.reset();
        } else {
          // Error feedback
          const errorElement = document.createElement('div');
          errorElement.className = 'alert alert-danger';
          errorElement.innerHTML = `<i class="fas fa-exclamation-circle"></i> ${result.message || 'Failed to update password. Please try again.'}`;

          // Insert at the top of the form
          passwordForm.insertBefore(errorElement, passwordForm.firstChild);
        }
      } catch (error) {
        console.error('Error updating password:', error);

        // Error feedback
        const errorElement = document.createElement('div');
        errorElement.className = 'alert alert-danger';
        errorElement.innerHTML = `<i class="fas fa-exclamation-circle"></i> ${error.message || 'An unexpected error occurred. Please try again.'}`;

        // Insert at the top of the form
        passwordForm.insertBefore(errorElement, passwordForm.firstChild);
      } finally {
        // Restore button state
        submitButton.disabled = false;
        submitButton.innerHTML = originalButtonText;

        // Remove alerts after 5 seconds
        setTimeout(() => {
          const alerts = passwordForm.querySelectorAll('.alert');
          alerts.forEach(alert => {
            alert.classList.add('fade-out');
            setTimeout(() => alert.remove(), 300);
          });
        }, 5000);
      }
    });
  }
});
// upload profile image
document.addEventListener('DOMContentLoaded', function() {
  const imageUploadForm = document.getElementById('imageUploadForm');
  const profileImageInput = document.getElementById('profileImage');
  const profileImagePreview = document.getElementById('profileImagePreview');

  // Preview image before upload
  if (profileImageInput) {
    profileImageInput.addEventListener('change', function() {
      const file = this.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = function(e) {
          // Create preview if it doesn't exist
          if (!profileImagePreview) {
            const previewContainer = document.querySelector('.current-image');
            previewContainer.innerHTML = '';
            const newPreview = document.createElement('img');
            newPreview.id = 'profileImagePreview';
            newPreview.alt = 'Profile Image Preview';
            previewContainer.appendChild(newPreview);
            newPreview.src = e.target.result;
          } else {
            profileImagePreview.src = e.target.result;
          }
        };
        reader.readAsDataURL(file);
      }
    });
  }

  // Handle form submission
  if (imageUploadForm) {
    imageUploadForm.addEventListener('submit', async function(e) {
      e.preventDefault();

      // Remove any existing alerts
      const existingAlerts = imageUploadForm.querySelectorAll('.alert');
      existingAlerts.forEach(alert => alert.remove());

      // Check if a file was selected
      if (!profileImageInput.files || !profileImageInput.files[0]) {
        const alertElement = document.createElement('div');
        alertElement.className = 'alert alert-danger';
        alertElement.innerHTML = '<i class="fas fa-exclamation-circle"></i> Please select an image file.';
        imageUploadForm.insertBefore(alertElement, imageUploadForm.firstChild);
        return;
      }

      // Show loading state
      const submitButton = imageUploadForm.querySelector('button[type="submit"]');
      const originalButtonText = submitButton.innerHTML;
      submitButton.disabled = true;
      submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Uploading...';

      try {
        // Create FormData object
        const formData = new FormData();
        formData.append('profileImage', profileImageInput.files[0]);

        // Send request to upload profile image
        const response = await fetch('/account/upload-image', {
          method: 'POST',
          body: formData,
          credentials: 'include' // Include credentials to send cookies
        });

        // Check if the response is JSON before parsing
        const contentType = response.headers.get('content-type');
        let result;
        if (contentType && contentType.includes('application/json')) {
          result = await response.json();
        } else {
          // If not JSON, get the text and create a custom error object
          const text = await response.text();
          console.error('Non-JSON response:', text);
          result = { 
            success: false, 
            message: 'Server returned non-JSON response. You may need to log in again.' 
          };
        }

        if (response.ok && result.success) {
          // Success feedback
          const successElement = document.createElement('div');
          successElement.className = 'alert alert-success';
          successElement.innerHTML = `<i class="fas fa-check-circle"></i> ${result.message || 'Profile image updated successfully!'}`;
          imageUploadForm.insertBefore(successElement, imageUploadForm.firstChild);

          // Update the image if it was returned
          if (result.imageUrl) {
            // If there's no preview element yet, create one
            const previewContainer = document.querySelector('.current-image');
            if (previewContainer.querySelector('.no-image')) {
              previewContainer.innerHTML = '';
              const newImg = document.createElement('img');
              newImg.id = 'profileImagePreview';
              newImg.alt = 'Profile Image';
              // Add cache-busting parameter to prevent browser caching
              newImg.src = `${result.imageUrl}?t=${new Date().getTime()}`;
              previewContainer.appendChild(newImg);
            } else if (profileImagePreview) {
              // Add cache-busting parameter to prevent browser caching
              profileImagePreview.src = `${result.imageUrl}?t=${new Date().getTime()}`;
            }
            
            // Reload the page after 1 second to ensure the session is updated
            setTimeout(() => {
              window.location.reload();
            }, 1000);
          }
        } else {
          // Error feedback
          const errorElement = document.createElement('div');
          errorElement.className = 'alert alert-danger';
          errorElement.innerHTML = `<i class="fas fa-exclamation-circle"></i> ${result.message || 'Failed to upload image. Please try again.'}`;
          imageUploadForm.insertBefore(errorElement, imageUploadForm.firstChild);
        }
      } catch (error) {
        console.error('Error uploading profile image:', error);

        // Error feedback
        const errorElement = document.createElement('div');
        errorElement.className = 'alert alert-danger';
        errorElement.innerHTML = `<i class="fas fa-exclamation-circle"></i> ${error.message || 'An unexpected error occurred. Please try again.'}`;
        imageUploadForm.insertBefore(errorElement, imageUploadForm.firstChild);
      } finally {
        // Restore button state
        submitButton.disabled = false;
        submitButton.innerHTML = originalButtonText;

        // Remove alerts after 5 seconds
        setTimeout(() => {
          const alerts = imageUploadForm.querySelectorAll('.alert');
          alerts.forEach(alert => {
            alert.classList.add('fade-out');
            setTimeout(() => alert.remove(), 300);
          });
        }, 5000);
      }
    });
  }
});
</script>
